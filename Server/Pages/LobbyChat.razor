@using System.Diagnostics
@using Microsoft.AspNetCore.SignalR.Client;
@using Core.Networking.Messages;
@inject NavigationManager Navigation
@implements IAsyncDisposable

<h3>LobbyChat</h3>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button disabled="@(!IsConnected())" @onclick="Send" >Send</button>


<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/LobbyHub"))
            .Build();

        hubConnection.On<ReceiveMessageMessage>("ReceiveMessage", (msg) =>
        {
            var encodedMsg = $"{msg.UserName}: {msg.MessageText}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected()
    {
        return hubConnection?.State == HubConnectionState.Connected;
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}