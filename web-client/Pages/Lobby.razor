@page "/Lobby"
@using web_client.Shared.Lobby
@using Microsoft.AspNetCore.SignalR.Client
@using Ceres.Core.Networking.Messages
@using global::Shared.States
@using webclient.Services

@implements IDisposable

@inject ISignalRHub LobbyHubService
@inject UserState UserState


<CascadingValue Value="IsConnected">
    <div class="card">
        <h4 class="card-header">Lobby</h4>
        <GamesList @ref="GamesList"/>
        <ClientsList @ref="ClientList"/>
        <LobbyChat @ref="LobbyChat" LobbyHubConnection="hubConnection"/>
        <div class="card-footer">
            @($"User:{UserState.UserName} Lobby:{(IsConnected ? "Connected" : "Disconnected")}")
        </div>
    </div>
    
</CascadingValue>

@code {

    private HubConnection? hubConnection;
    
    private LobbyChat? LobbyChat { get; set; }
    private ClientsList? ClientList { get; set; }
    private GamesList? GamesList { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        UserState.OnChange += StateHasChanged;
        
        hubConnection = LobbyHubService.LobbyHubConnection;

        LobbyHubService.OnHubStataHasChanged += StateHasChanged;
        
        hubConnection.On<ReceiveMessageMessage>("ReceiveMessage", LobbyChatAddMessage);
        hubConnection.On<ClientsListMessage>("ClientsList", ClientsListUpdate);
        hubConnection.On<UpdateGamesMessage>("UpdateGames",GamesListUpdate);

        if (hubConnection.State == HubConnectionState.Disconnected)
            await LobbyHubService.ConnectWithRetryAsync(CancellationToken.None);
    }

    private void GamesListUpdate(UpdateGamesMessage msg)
    {
        if (GamesList == null) return;
        GamesList.Games = msg.GameIds.ToList();
        GamesList.Refresh();
    }

    private void LobbyChatAddMessage(ReceiveMessageMessage msg) => LobbyChat?.AddMessage(msg.UserName, msg.MessageText);

    private void ClientsListUpdate(ClientsListMessage msg)
    {
        if (ClientList == null) return;
        ClientList.Clients = msg.LobbyUsers.ToList();
        foreach (var u in msg.LobbyUsers)
        {
            if (u.LobbyConnectionId == LobbyHubService.LobbyHubConnection.ConnectionId)
                UserState.UserName = u.UserName;
        }
        ClientList.Refresh();
    }

    private bool IsConnected
    {
        get
        {
            if (hubConnection == null) return false;
            return hubConnection.State == HubConnectionState.Connected;
        }
    }
    
    public void Dispose()
    {
        UserState.OnChange -= StateHasChanged;
    }
    
    

}