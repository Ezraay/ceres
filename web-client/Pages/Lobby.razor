@page "/Lobby"
@using web_client.Shared.Lobby
@using Microsoft.AspNetCore.SignalR.Client
@using Ceres.Core.Networking.Messages
@using global::Shared.States
@using webclient.Services

@implements IDisposable

@inject LobbyHub LobbyHubService
@inject UserState UserState
@inject NavigationManager NavigationManager


<CascadingValue Value="IsConnected">
    <CascadingValue Value="hubConnection">
        <div class="card">
            <div class="card-header">
                <div class="row">
                    <h4 class="col">Lobby</h4>
                    <div class="col-auto"><Ready2Play/></div>
                </div>
            </div>
            <LobbyChat @ref="LobbyChat"/>
            <ClientsList @ref="ClientList"/>
            <GamesList @ref="GamesList"/>
            <div class="card-footer">
                @($"Lobby:{(IsConnected ? "Connected" : "Disconnected")}   User:{UserState.UserName} {(UserState.ReadyToPlay ? " - Ready To Play" : "")}")
            </div>
        </div>
    </CascadingValue>
</CascadingValue>


@code {

    private HubConnection? hubConnection;
    
    private LobbyChat? LobbyChat { get; set; }
    private ClientsList? ClientList { get; set; }
    private GamesList? GamesList { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        UserState.OnChange += StateHasChanged;
        
        hubConnection = LobbyHubService.HubConnection;

        LobbyHubService.OnHubStataHasChanged += StateHasChanged;
        
        hubConnection.On<ReceiveMessageMessage>("ReceiveMessage", LobbyChatAddMessage);
        hubConnection.On<ClientsListMessage>("ClientsList", ClientsListUpdate);
        hubConnection.On<UpdateGamesMessage>("UpdateGames",GamesListUpdate);
        hubConnection.On<GoToGameMessage>("GoToGame",OnGoToGame);

        if (hubConnection.State == HubConnectionState.Disconnected)
            await LobbyHubService.ConnectWithRetryAsync(CancellationToken.None);
    }

    private void OnGoToGame(GoToGameMessage msg)
    {
        NavigationManager.NavigateTo($"/game/{msg.GameId}");
    }
    
    private void GamesListUpdate(UpdateGamesMessage msg)
    {
        if (GamesList == null) return;
        GamesList.Games = msg.GameIds.ToList();
        GamesList.Refresh();
    }

    private void LobbyChatAddMessage(ReceiveMessageMessage msg) => LobbyChat?.AddMessage(msg.UserName, msg.MessageText);

    private void ClientsListUpdate(ClientsListMessage msg)
    {
        if (ClientList == null) return;
        ClientList.Clients = msg.LobbyUsers.ToList();
        foreach (var u in msg.LobbyUsers)
        {
            if (u.LobbyConnectionId == LobbyHubService.HubConnection.ConnectionId)
                UserState.UserName = u.UserName;
        }
        ClientList.Refresh();
    }

    private bool IsConnected
    {
        get
        {
            if (hubConnection == null) return false;
            return hubConnection.State == HubConnectionState.Connected;
        }
    }
    
    public void Dispose()
    {
        UserState.OnChange -= StateHasChanged;
    }
    
    

}