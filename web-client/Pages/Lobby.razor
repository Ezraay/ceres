@page "/Lobby"
@using web_client.Shared.Lobby
@using Microsoft.AspNetCore.SignalR.Client;
@using Ceres.Core.Networking.Messages;
@using webclient.Services
@inject ISignalRHub LobbyHubService;

<h3>Lobby - @(IsConnected ? "Connected" : "Disconnected")</h3>

<CascadingValue Value="IsConnected">
    <GamesList @ref="GamesList"/>
    <hr>
    <ClientsList @ref="ClientList"/>
    <hr>
    <LobbyChat @ref="LobbyChat" LobbyHubConnection="hubConnection"   />
</CascadingValue>

@code {

    private HubConnection? hubConnection;
    
    private LobbyChat? LobbyChat { get; set; }
    private ClientsList? ClientList { get; set; }
    private GamesList? GamesList { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        hubConnection = LobbyHubService.LobbyHubConnection;

        LobbyHubService.OnHubStataHasChanged += StateHasChanged;
        
        hubConnection.On<ReceiveMessageMessage>("ReceiveMessage", LobbyChatAddMessage);
        hubConnection.On<ClientsListMessage>("ClientsList", ClientsListUpdate);
        hubConnection.On<UpdateGamesMessage>("UpdateGames",GamesListUpdate);

        if (hubConnection.State == HubConnectionState.Disconnected)
            await LobbyHubService.ConnectWithRetryAsync(CancellationToken.None);
    }

    private void GamesListUpdate(UpdateGamesMessage msg)
    {
        if (GamesList == null) return;
        GamesList.Games = msg.GameIds.ToList();
        GamesList.Refresh();
    }

    private void LobbyChatAddMessage(ReceiveMessageMessage msg) => LobbyChat?.AddMessage(msg.UserName, msg.MessageText);

    private void ClientsListUpdate(ClientsListMessage msg)
    {
        if (ClientList == null) return;
        ClientList.Clients = msg.LobbyUsers.ToList();
        ClientList.Refresh();
    }

    private bool IsConnected
    {
        get
        {
            if (hubConnection == null) return false;
            return hubConnection.State == HubConnectionState.Connected;
        }
    }
    
    

}