@using Microsoft.AspNetCore.SignalR.Client
@using global::Shared.States
@using Ceres.Core.Networking.Messages
@implements IDisposable
@inject UserState UserState

@if (IsConnected)
{
    <div class="card text-dark bg-light m-3">
        <h5 class="card-header">Chat</h5>
        <div class="card-body">
            <div class="row p-1">
                <label class="col-2" for="userNameInput">User</label>
                <div class="col"><input class="w-100" id="userNameInput" type="text" @bind="UserNameInput" disabled="@(!IsConnected)"/></div>
                <button class="col-auto btn btn-outline-secondary btn-sm" disabled="@(!IsConnected)" @onclick="ChangeName">ChangeName</button>
            </div>
            <div class="row p-1">
                <label class="col-2" for="messageInput">Message</label>
                <div class="col"><input class="w-100" id="messageInput" @bind="messageInput" disabled="@(!IsConnected)"/></div>
                <button class="col-auto btn btn-outline-secondary btn-sm" disabled="@(!IsConnected)" @onclick="Send">Send</button>
            </div>
            <hr>
            <ul class="scrollable-box list-group list-group-flush">
                @for (var i = messages.Count - 1; i >= 0; i--)
                {
                    <li class="list-group-item">@messages[i]</li>
                }
            </ul>
        </div>
    </div>
}
@code {

    private List<string> messages = new();
    private string? messageInput;

    [CascadingParameter]
    public HubConnection? LobbyHubConnection { get; set; }
    [CascadingParameter]
    public bool IsConnected { get; set; }

    private string? UserNameInput
    {
        get => UserState.UserName;
        set
        {
            if (value != null) UserState.UserName = value;
        }
    }
    
    protected override void OnInitialized()
    {
        UserState.OnChange += StateHasChanged;
    }

    public void AddMessage(string userName, string message)
    {
        var encodedMsg = $"{userName}: {message}";
        messages.Add(encodedMsg);
        InvokeAsync(StateHasChanged);
    }

    private async Task Send()
    {
        if (LobbyHubConnection is not null && IsConnected && messageInput != null)
        {
            var msg = new ClientSendMessageNetworkMessage() { UserName = UserState.UserName, Message = messageInput };
            await LobbyHubConnection.SendAsync(msg.MessageName, msg);
        }
    }
    private async Task ChangeName()
    {
        if (LobbyHubConnection is not null && IsConnected)
        {
            var msg = new ClientChangeUserNameNetworkMessage() {NewName = UserState.UserName};
            await LobbyHubConnection.SendAsync(msg.MessageName, msg);
        }
    }

    private void UserNameChanged()
    {
        if (UserNameInput != null) UserState.UserName = UserNameInput;
    }

    public void Dispose()
    {
        UserState.OnChange -= StateHasChanged;
    }




}